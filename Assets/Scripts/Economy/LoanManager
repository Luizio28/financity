using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class LoanManager : MonoBehaviour
{
    /// <summary>
    /// Represents data for a loan, including total value, principal value, interest rate, installment value, and time value.
    /// </summary>
    [System.Serializeable]
    public struct LoanData{
        internal readonly float TotalValue;
        internal readonly float PrincipalValue;
        internal readonly float RateValue;
        internal readonly float InstallmentValue;
        internal readonly int TimeValue;
    }

    /// <summary>
    /// Calculates the compound interest based on the principal, rate, and time.
    /// </summary>
    /// <param name="principal">The initial amount of money.</param>
    /// <param name="rate">The interest rate per period.</param>
    /// <param name="time">The number of periods the interest is applied.</param>
    /// <returns>The total value after applying compound interest.</returns>
    public static LoanData CalculateCompoundInterest(float principal, float rate, int time){
        rate += 1;
        float _compoundInterest = Mathf.Pow(rate, time);
        float _totalValue = principal * _compoundInterest;
        float _installmentValue = _totalValue/time;
        return new LoanData(_totalValue, principal, rate, _installmentValue, time);
    }

    /// <summary>
    /// Calculates the simple interest based on the principal and rate.
    /// </summary>
    /// <param name="principal">The initial amount of money.</param>
    /// <param name="rate">The interest rate per period.</param>
    /// <returns>The total value after applying simple interest.</returns>
    public static LoanData CalculateSimpleInterest(float principal, float rate, float time){
        rate += 1;
        float _totalValue = principal * rate;
        float _installmentValue = _totalValue/time;
        return new LoanData(_totalValue, principal, rate, _installmentValue, time);
    }
}